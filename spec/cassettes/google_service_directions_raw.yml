---
http_interactions:
- request:
    method: get
    uri: https://maps.googleapis.com/maps/api/directions/json?destination=Denver,CO&key=<GOOGLE_API_KEY>&origin=Pueblo,%20CO
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.17.0
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - application/json; charset=UTF-8
      Date:
      - Wed, 06 Nov 2019 15:14:39 GMT
      Pragma:
      - no-cache
      Expires:
      - Fri, 01 Jan 1990 00:00:00 GMT
      Cache-Control:
      - no-cache, must-revalidate
      Vary:
      - Accept-Language
      Server:
      - mafe
      X-Xss-Protection:
      - '0'
      X-Frame-Options:
      - SAMEORIGIN
      Server-Timing:
      - gfet4t7; dur=92
      Alt-Svc:
      - quic=":443"; ma=2592000; v="46,43",h3-Q049=":443"; ma=2592000,h3-Q048=":443";
        ma=2592000,h3-Q046=":443"; ma=2592000,h3-Q043=":443"; ma=2592000
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Wed, 06 Nov 2019 15:14:39 GMT
recorded_with: VCR 5.0.0
